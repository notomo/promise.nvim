*promise.nvim.txt*

==============================================================================
Lua module: promise                                     *promise.nvim-promise*

new({executor})                                                *promise.new()*
  Equivalents to JavaScript's Promise.new.

  Parameters: ~
    {executor} (function) `(resolve: function(...), reject: function(...))`

  Return: ~
    (table) Promise

resolve({...})                                             *promise.resolve()*
  Returns a fulfilled promise.
  But if the first argument is promise, returns the promise.

  Parameters: ~
    {...} (any) one promise or non-promises

  Return: ~
    (table) Promise

reject({...})                                               *promise.reject()*
  Returns a rejected promise.
  But if the first argument is promise, returns the promise.

  Parameters: ~
    {...} (any) one promise or non-promises

  Return: ~
    (table) Promise

next({on_fullfilled}, {on_rejected})                          *promise:next()*
  Equivalents to JavaScript's Promise.then.

  Parameters: ~
    {on_fullfilled} (function|nil) A callback on fullfilled.
    {on_rejected} (function|nil) A callback on rejected.

  Return: ~
    (table) Promise

catch({on_rejected})                                         *promise:catch()*
  Equivalents to JavaScript's Promise.catch.

  Parameters: ~
    {on_rejected} (function|nil) A callback on rejected.

  Return: ~
    (table) Promise

finally({on_finally})                                      *promise:finally()*
  Equivalents to JavaScript's Promise.finally.

  Parameters: ~
    {on_finally} (function) 

  Return: ~
    (table) Promise

all({list})                                                    *promise.all()*
  Equivalents to JavaScript's Promise.all.
  Even if multiple value are resolved, results include only the first value.

  Parameters: ~
    {list} (table) promise or non-promise values

  Return: ~
    (table) Promise

race({list})                                                  *promise.race()*
  Equivalents to JavaScript's Promise.race.

  Parameters: ~
    {list} (table) promise or non-promise values

  Return: ~
    (table) Promise

any({list})                                                    *promise.any()*
  Equivalents to JavaScript's Promise.any.
  Even if multiple value are rejected, errors include only the first value.

  Parameters: ~
    {list} (table) promise or non-promise values

  Return: ~
    (table) Promise

==============================================================================
EXAMPLES                                               *promise.nvim-EXAMPLES*

>
  local Promise = require("promise")

  Promise.resolve("ok"):next(function(value)
    assert(true)
    return "next", value
  end):next(function(...)
    assert(#{...} == 2)
  end):catch(function(...)
    assert(false)
    return ...
  end):finally(function()
    assert(true)
  end)

  Promise.reject("error"):next(function()
    assert(false)
  end):catch(function(err)
    assert(true)
    return "catch", err
  end)

  local do_async = function(i)
    return Promise.new(function(resolve, reject)
      vim.defer_fn(function()
        if i % 2 == 1 then
          resolve("ok" .. i)
        else
          reject("error")
        end
      end, i * 10)
    end)
  end

  Promise.all({do_async(1), do_async(3), do_async(5)}):next(function(value)
    assert(vim.deep_equal(value, {"ok1", "ok3", "ok5"}))
  end)

  Promise.race({do_async(1), do_async(3), do_async(5)}):next(function(value)
    assert(value == "ok1")
  end)

  Promise.any({do_async(1), do_async(2)}):next(function(value)
    assert(value == "ok1")
  end)
<

==============================================================================
vim:tw=78:ts=8:ft=help
