*promise.nvim.txt*

==============================================================================
Lua module: promise                                     *promise.nvim-promise*

new({f})                                                       *promise.new()*
  TODO doc

  Parameters: ~
    {f} (function) 

resolve()                                                  *promise.resolve()*
  TODO doc
    {...} (any) 

reject()                                                    *promise.reject()*
  TODO doc
    {...} (any) 

next({on_fullfilled}, {on_rejected})                          *promise.next()*
  TODO doc

  Parameters: ~
    {on_fullfilled} (function|nil) 
    {on_rejected} (function|nil) 

catch({on_rejected})                                         *promise.catch()*
  TODO doc

  Parameters: ~
    {on_rejected} (function|nil) 

finally({on_finally})                                      *promise.finally()*
  TODO doc

  Parameters: ~
    {on_finally} (function) 

all({list})                                                    *promise.all()*
  TODO doc

  Parameters: ~
    {list} (table) 

race({list})                                                  *promise.race()*
  TODO doc

  Parameters: ~
    {list} (table) 

==============================================================================
EXAMPLES                                               *promise.nvim-EXAMPLES*

>
  local Promise = require("promise")

  Promise.resolve("ok"):next(function(value)
    assert(true)
    return "next", value
  end):next(function(...)
    assert(#{...} == 2)
  end):catch(function(...)
    assert(false)
    return ...
  end):finally(function()
    assert(true)
  end)

  Promise.reject("error"):next(function()
    assert(false)
  end):catch(function(err)
    assert(true)
    return "catch", err
  end)

  local do_async = function(i)
    return Promise.new(function(resolve, reject)
      vim.defer_fn(function()
        if i % 2 == 1 then
          resolve("ok" .. i)
        else
          reject("error")
        end
      end, i * 10)
    end)
  end

  Promise.all({do_async(1), do_async(3), do_async(5)}):next(function(value)
    assert(vim.deep_equal(value, {"ok1", "ok3", "ok5"}))
  end)

  Promise.race({do_async(1), do_async(3), do_async(5)}):next(function(value)
    assert(value == "ok1")
  end)
<

==============================================================================
vim:tw=78:ts=8:ft=help
